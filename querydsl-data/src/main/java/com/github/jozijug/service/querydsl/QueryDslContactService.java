package com.github.jozijug.service.querydsl;

import com.github.jozijug.jpadomain.Company;
import com.github.jozijug.jpadomain.Contact;
import com.github.jozijug.service.ContactService;
import com.mysema.query.types.Predicate;
import org.springframework.data.domain.PageRequest;

import javax.ejb.Stateless;
import javax.inject.Inject;
import java.util.ArrayList;
import java.util.List;

import static com.github.jozijug.jpadomain.QContact.*;
import static com.github.jozijug.jpadomain.QCompany.*;

/**
 * Classes starting with Q and named after entities are generated by QueyDSL Annotation Processor.
 *
 * @author Corneil du Plessis
 */
@Stateless
public class QueryDslContactService implements ContactService {

    @Inject
    CompanyRepository companyRepository;
    @Inject
    ContactRepository contactRepository;
    public void save(Contact entry) {
        contactRepository.save(entry);
    }
    public void delete(Contact value) {
        contactRepository.delete(value);
    }
    @Override
    public List<Contact> findByCompanyName(String name) {
        List<Contact> results = new ArrayList<Contact>();
        for (Contact item : contactRepository.findAll(contact.company.name.eq(name))){
            results.add(item);
        }
        return results;
    }
    @Override
    public List<Contact> findByCompanyAndName(Company company, String filter) {
        List<Contact> results = new ArrayList<Contact>();
        for (Contact item : contactRepository.findAll(createQuery(company, filter))) {
            results.add(item);
        }
        return results;
    }
    public List<Contact> findPageByCompanyAndName(Company company, String filter, int firstrow, int maxrows) {
        return contactRepository.findAll(createQuery(company, filter),
                new PageRequest(firstrow / maxrows, maxrows)).getContent();
    }
    /*
        This method creates a predicate that can be used in multiple ways with QueryDSLPredicateExecutor
     */
    private Predicate createQuery(Company company, String filter) {
        return contact.company.eq(company).and(contact.name.containsIgnoreCase(filter));
    }
    @Override
    public Long countByCompanyName(String name) {
        return companyRepository.count(company.name.eq(name));
    }
    public Long countByCompanyAndName(Company company, String filter) {
        return contactRepository.count(createQuery(company, filter));
    }
    public List<Company> findCompanies() {
        return companyRepository.findAll();
    }

    public Contact refreshEntry(Contact entry) {
        return contactRepository.findOne(entry.getId());
    }

}
